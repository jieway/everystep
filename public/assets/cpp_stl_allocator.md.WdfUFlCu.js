import{_ as s,c as i,o as a,R as l}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/stl/allocator.md","filePath":"cpp/stl/allocator.md"}'),t={name:"cpp/stl/allocator.md"},n=l(`<p>在 C++ 标准模板库（STL）中，空间配置器（allocator）是用于控制容器对象如何分配和释放内存的组件。<code>std::allocator</code> 是最常用的配置器，它是所有标准容器的默认配置器。</p><h3 id="空间配置器的概念" tabindex="-1">空间配置器的概念 <a class="header-anchor" href="#空间配置器的概念" aria-label="Permalink to &quot;空间配置器的概念&quot;">​</a></h3><ul><li><strong>作用</strong>：配置器用于抽象内存分配和释放的过程，从而使容器可以独立于具体的内存分配机制。</li><li><strong>自定义配置器</strong>：你可以提供自己的配置器来改变内存分配的行为（例如，为了提高效率或进行特殊的内存管理）。</li></ul><h3 id="std-allocator-的基本使用" tabindex="-1"><code>std::allocator</code> 的基本使用 <a class="header-anchor" href="#std-allocator-的基本使用" aria-label="Permalink to &quot;\`std::allocator\` 的基本使用&quot;">​</a></h3><ul><li><strong>类型</strong>：<code>std::allocator&lt;T&gt;</code>，其中 <code>T</code> 是要分配内存的对象类型。</li><li><strong>方法</strong>：提供了 <code>allocate</code>, <code>deallocate</code>, <code>construct</code>, <code>destroy</code> 等方法来管理内存。</li></ul><h3 id="示例-使用-std-allocator-为-int-数组分配内存" tabindex="-1">示例：使用 <code>std::allocator</code> 为 <code>int</code> 数组分配内存 <a class="header-anchor" href="#示例-使用-std-allocator-为-int-数组分配内存" aria-label="Permalink to &quot;示例：使用 \`std::allocator\` 为 \`int\` 数组分配内存&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">memory</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 包含 std::allocator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">allocator</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;int&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> allocator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 分配内存</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> allocator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">allocate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 分配5个int的空间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 构造对象</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        allocator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">construct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 在分配的内存上构造int</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 使用分配的内存</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 析构和释放内存</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        allocator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">destroy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 析构对象</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    allocator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">deallocate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 释放内存</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在这个示例中，我们使用 <code>std::allocator&lt;int&gt;</code> 分配了足够存储5个 <code>int</code> 的内存，然后在这些空间上构造了 <code>int</code> 对象。使用完毕后，我们销毁了这些对象并释放了内存。</p><h3 id="自定义配置器" tabindex="-1">自定义配置器 <a class="header-anchor" href="#自定义配置器" aria-label="Permalink to &quot;自定义配置器&quot;">​</a></h3><p>虽然 <code>std::allocator</code> 足够一般使用，但在某些情况下，你可能想要自定义配置器。例如，你可能想要一个使用池分配策略的配置器，或者一个记录所有分配和释放操作的配置器。自定义配置器需要实现与 <code>std::allocator</code> 类似的接口。</p><h3 id="和-malloc-的区别" tabindex="-1">和 malloc 的区别 <a class="header-anchor" href="#和-malloc-的区别" aria-label="Permalink to &quot;和 malloc 的区别&quot;">​</a></h3><p>在 C++ 中，<code>std::allocator</code> 和 <code>malloc</code> 是两种用于内存分配的机制，它们有一些关键的区别：</p><h4 id="std-allocator" tabindex="-1"><code>std::allocator</code> <a class="header-anchor" href="#std-allocator" aria-label="Permalink to &quot;\`std::allocator\`&quot;">​</a></h4><ol><li><p><strong>类型感知</strong>：<code>std::allocator</code> 是一个模板类，它对其分配的对象类型是感知的。这意味着，当你使用 <code>std::allocator&lt;T&gt;</code> 分配内存时，它知道每个分配的对象的类型是 <code>T</code>。这允许它在分配内存的同时调用对象的构造函数。</p></li><li><p><strong>与 STL 容器集成</strong>：<code>std::allocator</code> 与 STL 容器紧密集成。所有标准容器都使用分配器来管理其内存，<code>std::allocator</code> 是默认分配器。</p></li><li><p><strong>构造和析构</strong>：除了内存分配和释放，<code>std::allocator</code> 还提供了构造和析构对象的方法（通过 <code>construct</code> 和 <code>destroy</code> 方法）。</p></li><li><p><strong>异常安全</strong>：<code>std::allocator</code> 通常被设计为异常安全的，这意味着在内存分配失败时，它会抛出异常，而不是返回空指针。</p></li></ol><h4 id="malloc" tabindex="-1"><code>malloc</code> <a class="header-anchor" href="#malloc" aria-label="Permalink to &quot;\`malloc\`&quot;">​</a></h4><ol><li><p><strong>类型不感知</strong>：<code>malloc</code> 是 C 语言的内存分配函数，它对分配的内存类型不感知。它仅根据请求的字节数分配内存，并返回一个 <code>void*</code> 指针。它不调用对象的构造函数或析构函数。</p></li><li><p><strong>错误处理</strong>：当 <code>malloc</code> 无法分配内存时，它返回一个空指针，而不是抛出异常。这要求程序员显式检查返回值以确定内存分配是否成功。</p></li><li><p><strong>与 C++ 容器不兼容</strong>：<code>malloc</code> 不适用于 C++ STL 容器，因为它不调用构造函数和析构函数。</p></li><li><p><strong>手动类型转换</strong>：使用 <code>malloc</code> 分配的内存需要进行手动类型转换，因为它返回的是 <code>void*</code>。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>空间配置器是 STL 中一个重要的组件，它提供了一种灵活的方式来控制内存的分配和释放。虽然大多数情况下 <code>std::allocator</code> 足够使用，但 STL 的设计允许你根据需要使用自定义的配置器。这是 C++ 对内存管理提供的一个高级和强大的工具，允许程序员针对特定的需求或性能目标进行优化。</p><ul><li><code>std::allocator</code> 更适合用在 C++ 中，特别是与 STL 容器一起使用，因为它提供了类型感知、对象生命周期管理（构造和析构）和异常安全性。</li><li><code>malloc</code> 是一种更原始的内存分配方式，来自 C 语言。它在分配原始内存时很有用，但不适用于需要对象构造和析构的场合。</li></ul>`,19),h=[n];function k(p,e,d,r,o,c){return a(),i("div",null,h)}const A=s(t,[["render",k]]);export{y as __pageData,A as default};
