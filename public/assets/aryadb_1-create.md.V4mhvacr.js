import{_ as s,c as i,o as a,R as t}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"Hello World","description":"","frontmatter":{},"headers":[],"relativePath":"aryadb/1-create.md","filePath":"aryadb/1-create.md"}'),l={name:"aryadb/1-create.md"},n=t(`<h1 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h1><p>这一节主要描述如何创建 C++ 项目，引入 Cmake、Google Test 等知识。</p><h2 id="c-23-环境配置" tabindex="-1">C++23 环境配置 <a class="header-anchor" href="#c-23-环境配置" aria-label="Permalink to &quot;C++23 环境配置&quot;">​</a></h2><p>使用 Ubuntu 20.04 作为开发环境，Windows 上推荐使用 WSL 。</p><p>在 ubuntu 20.04 上默认 GCC 版本比较低，需要升级到 GCC 11 ，这个版本的 GCC 支持 C++23 。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add-apt-repository</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppa:ubuntu-toolchain-r/test</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apt-get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> update</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apt-get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc-11</span></span></code></pre></div><h2 id="_1-创建项目" tabindex="-1">1. 创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1. 创建项目&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aryadb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aryadb</span></span></code></pre></div><p>创建 main.cpp 并输入下面的内容</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, World!</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>创建 CMakeLists.txt 并输入下面的内容：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.27)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(aryadb)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD 23)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(aryadb main.cpp)</span></span></code></pre></div><p>这段代码是一个 CMake 配置文件的一部分，用于设置和构建名为 &quot;aryadb&quot; 的项目。以下是对其主要内容的简要总结：</p><ol><li><p><strong>指定 CMake 最低版本</strong>：<code>cmake_minimum_required(VERSION 3.27)</code> 指定了构建此项目所需的最低 CMake 版本为 3.27。</p></li><li><p><strong>项目名称</strong>：<code>project(aryadb)</code> 设置了项目的名称为 &quot;aryadb&quot;。</p></li><li><p><strong>设置 C++ 标准</strong>：<code>set(CMAKE_CXX_STANDARD 23)</code> 指定了项目使用的 C++ 标准为 C++23。</p></li><li><p><strong>添加可执行文件</strong>：<code>add_executable(aryadb main.cpp)</code> 指示 CMake 为项目创建一个名为 &quot;aryadb&quot; 的可执行文件，源文件是 &quot;main.cpp&quot;。</p></li></ol><p>总的来说，这段 CMake 配置文件为名为 &quot;aryadb&quot; 的项目设置了基本的构建参数，包括 CMake 的最低版本要求、项目名称、使用的 C++ 标准以及主要的源文件。</p><p>在整个 <code>CMakeLists.txt</code> 文件中，定义了项目的基本属性和构建规则。CMake 是一个构建系统生成器，根据 <code>CMakeLists.txt</code> 文件中的指令，生成适用于编译器的实际构建文件（如 Makefile 或项目文件）。这样可以在多种不同的系统和环境中以一致的方式构建您的项目。</p><h2 id="_2-执行" tabindex="-1">2. 执行 <a class="header-anchor" href="#_2-执行" aria-label="Permalink to &quot;2. 执行&quot;">​</a></h2><p>接下来创建 build 编译并运行代码。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nproc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./aryadb</span></span></code></pre></div><ol><li><p><code>mkdir -p build &amp;&amp; cd build</code></p><ul><li><code>mkdir -p build</code>: 这个命令创建一个名为 <code>build</code> 的新目录。如果这个目录已经存在，<code>-p</code>（代表“父级”）参数确保命令不会失败。这通常用于创建一个用于存放构建输出的目录，以保持项目根目录的整洁。</li><li><code>&amp;&amp;</code>: 这是一个命令连接符，它确保只有在左侧的命令（<code>mkdir -p build</code>）成功执行后，才会执行右侧的命令（<code>cd build</code>）。</li><li><code>cd build</code>: 这个命令切换当前目录到刚刚创建的 <code>build</code> 目录中。</li></ul></li><li><p><code>cmake .. &amp;&amp; make -j $(nproc)</code></p><ul><li><code>cmake ..</code>: 这个命令运行 CMake，指导它配置项目。<code>..</code> 是一个相对路径，指向当前目录的上一级目录，也就是您的项目根目录（这里假设您的 <code>CMakeLists.txt</code> 文件在那里）。CMake 会读取 <code>CMakeLists.txt</code> 文件，并生成相应的构建系统文件（如 Makefile）。</li><li><code>make -j $(nproc)</code>: 这个命令实际上开始构建过程。 <ul><li><code>make</code> 是一个构建工具，用于实际编译代码和链接二进制文件。</li><li><code>-j $(nproc)</code> 是一个加速编译过程的技巧。<code>-j</code> 参数允许 <code>make</code> 并行执行多个任务，而 <code>$(nproc)</code> 会被替换为当前系统可用的处理器核心数，从而使构建过程尽可能快地运行。</li></ul></li></ul></li><li><p><code>./aryadb</code></p><ul><li>这个命令运行编译后生成的可执行文件 <code>aryadb</code>。<code>./</code> 指示终端在当前目录下查找名为 <code>aryadb</code> 的可执行文件并运行它。</li></ul></li></ol><p>综上所述，这些命令组合用于创建一个构建目录，使用 CMake 配置项目，编译项目，并最终运行编译后的程序。这是 C++ 项目通常的构建和运行流程。</p><h2 id="_3-google-test" tabindex="-1">3. Google Test <a class="header-anchor" href="#_3-google-test" aria-label="Permalink to &quot;3. Google Test&quot;">​</a></h2><p>接下来引入 Google Test 。Google Test 是一个由 Google 开发的 C++ 测试框架，专门用于编写单元测试。它提供了丰富的特性和工具，以支持开发者编写有效的单元测试。</p><p>要以 Git 子模块（Git Submodule）的方式引入 Google Test（gtest）到项目中，需要执行以下步骤：</p><ol><li><p><strong>初始化 Git 子模块</strong>： 在您的 Git 项目根目录下，运行以下命令来初始化子模块系统。这一步只需要执行一次。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span></code></pre></div></li><li><p><strong>添加 gtest 作为子模块</strong>： 添加 Google Test 仓库作为子模块到您的项目中。您可以将子模块放置在您希望的任何目录下，这里以 <code>third_party/googletest</code> 为例。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/google/googletest.git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> third_party/googletest</span></span></code></pre></div></li><li><p><strong>更新子模块</strong>： 更新子模块，以确保您的项目包含了 Google Test 的最新代码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> update</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --init</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --recursive</span></span></code></pre></div></li><li><p><strong>集成到构建系统中</strong>： 根据项目的构建系统，需要在构建脚本中添加对 Google Test 子模块的引用。以 CMake 为例，可以在 CMakeLists.txt 中添加类似以下内容：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> enable_testing</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> add_subdirectory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;third_party/googletest&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     g_test</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     g_test.cc</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> target_link_libraries</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     g_test</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     GTest::gtest_main</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> include</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GoogleTest)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> gtest_discover_tests(g_test)</span></span></code></pre></div></li><li><p><strong>创建 <code>g_test.cc</code> 文件并输入下述内容，用于验证 gtest 能否正常使用。</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">gtest/gtest.h</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HelloTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BasicAssertions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_STRNE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">world</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><strong>验证是否成功</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>cd build &amp;&amp; cmake .. &amp;&amp; make -j $(nproc) &amp;&amp; ./g_test</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[==========] Running 1 test from 1 test suite.</span></span>
<span class="line"><span>[----------] Global test environment set-up.</span></span>
<span class="line"><span>[----------] 1 test from HelloTest</span></span>
<span class="line"><span>[ RUN      ] HelloTest.BasicAssertions</span></span>
<span class="line"><span>[       OK ] HelloTest.BasicAssertions (0 ms)</span></span>
<span class="line"><span>[----------] 1 test from HelloTest (0 ms total)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[----------] Global test environment tear-down</span></span>
<span class="line"><span>[==========] 1 test from 1 test suite ran. (0 ms total)</span></span>
<span class="line"><span>[  PASSED  ] 1 test.</span></span></code></pre></div></li></ol><p>这些步骤将 Google Test 作为一个子模块添加到 Gitsbs 项目中，使得可以方便地共享和更新测试框架。使用子模块还有助于保持项目的整洁和组织，同时确保依赖项的版本一致性。</p><h2 id="_4-使用-leveldb" tabindex="-1">4. 使用 Leveldb <a class="header-anchor" href="#_4-使用-leveldb" aria-label="Permalink to &quot;4. 使用 Leveldb&quot;">​</a></h2><ol><li>下载并运行代码</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --recurse-submodules</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/google/leveldb.git</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nproc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><ol start="2"><li>创建文件 <code>app/main_test.cc</code> 并输入下面的内容来使用 Leveldb 。</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cassert</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">leveldb/db.h</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DB</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> db</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Options options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">create_if_missing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Status status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">DB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/tmp/testdb</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> db</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WriteOptions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> db</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">leveldb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ReadOptions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> val </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在 CMakeLists.txt 中添加 <code>leveldb_test(&quot;app/main_test.cc&quot;)</code> 随后使用<code>cmake --build . -j8 &amp;&amp; ./main_test</code> 编译并运行。</p><p>上面代码是一个简单实用 leveldb 插入删除的例子。</p>`,33),h=[n];function e(k,p,d,r,g,o){return a(),i("div",null,h)}const A=s(l,[["render",e]]);export{y as __pageData,A as default};
