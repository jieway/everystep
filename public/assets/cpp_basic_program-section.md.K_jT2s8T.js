import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/program-section.md","filePath":"cpp/basic/program-section.md"}'),t={name:"cpp/basic/program-section.md"},p=n(`<p>程序的内存布局通常分为几个主要的段（section），这些段包括代码段、数据段、堆、栈和 BSS 段。不同的段用于存储程序的不同部分和类型的数据。</p><p>下面是一个文本图形化表示，展示了一个典型的程序在内存中的布局：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>+------------------+ 高地址</span></span>
<span class="line"><span>|     Stack        | 栈 - 用于存储局部变量、函数参数等</span></span>
<span class="line"><span>|     ...          | 向下增长</span></span>
<span class="line"><span>+------------------+</span></span>
<span class="line"><span>|                  |</span></span>
<span class="line"><span>|    (空闲内存)     |</span></span>
<span class="line"><span>|                  |</span></span>
<span class="line"><span>+------------------+</span></span>
<span class="line"><span>|     Heap         | 堆 - 用于动态内存分配（如通过 new、malloc）</span></span>
<span class="line"><span>|     ...          | 向上增长</span></span>
<span class="line"><span>+------------------+</span></span>
<span class="line"><span>|  Uninitialized   |</span></span>
<span class="line"><span>|  Data (BSS)      | BSS 段 - 未初始化的全局和静态变量</span></span>
<span class="line"><span>+------------------+</span></span>
<span class="line"><span>|  Initialized     |</span></span>
<span class="line"><span>|  Data Segment    | 数据段 - 初始化的全局和静态变量</span></span>
<span class="line"><span>+------------------+</span></span>
<span class="line"><span>|   Code Segment   | 代码段 - 存储程序的机器代码</span></span>
<span class="line"><span>+------------------+ 低地址</span></span></code></pre></div><p>在这个图形化表示中：</p><ul><li><strong>栈（Stack）</strong>：通常位于内存的高地址部分，向下增长（即向低地址方向）。它包含了函数的局部变量和调用信息。</li><li><strong>堆（Heap）</strong>：位于栈和数据段之间，向上增长（即向高地址方向）。堆用于动态分配内存，例如通过 <code>new</code>、<code>malloc</code> 等。</li><li><strong>未初始化数据（BSS）</strong>：存储程序中未初始化的全局变量和静态变量。这些变量在程序启动时被初始化为零。</li><li><strong>初始化数据段</strong>：存储程序中已初始化的全局变量和静态变量。</li><li><strong>代码段</strong>：通常位于内存的低地址部分，包含程序的执行代码。</li></ul><p>请注意，这种表示是一个简化的视图，实际的内存布局可能因操作系统、编译器和程序的不同而有所变化。</p><p>下面是这些段的具体说明和示例：</p><h3 id="_1-代码段-text-segment" tabindex="-1">1. 代码段（Text Segment） <a class="header-anchor" href="#_1-代码段-text-segment" aria-label="Permalink to &quot;1. 代码段（Text Segment）&quot;">​</a></h3><p>代码段用于存储程序的执行代码。这部分内存通常是只读的，以防止程序意外修改其指令。</p><p><strong>示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 这里的代码会存储在代码段</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="_2-数据段" tabindex="-1">2. 数据段 <a class="header-anchor" href="#_2-数据段" aria-label="Permalink to &quot;2. 数据段&quot;">​</a></h3><p>数据段可以进一步分为两部分：初始化的数据段（Initialized Data Segment）和未初始化的数据段（BSS Segment）。</p><ul><li><p><strong>初始化的数据段</strong>（Data Segment）： 存储程序中显式初始化的全局变量和静态变量。这部分内存在程序开始执行前就已经分配和初始化。</p><p><strong>示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> globalVar </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 初始化的全局变量，存储在数据段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> staticVar </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 初始化的静态变量，存储在数据段</span></span></code></pre></div></li><li><p><strong>BSS 段</strong>（Block Started by Symbol）： 存储程序中未初始化的全局变量和静态变量。在程序启动时，这些变量通常被初始化为零。</p><p><strong>示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> uninitializedGlobalVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 未初始化的全局变量，存储在 BSS 段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> uninitializedStaticVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 未初始化的静态变量，存储在 BSS 段</span></span></code></pre></div></li></ul><h3 id="_3-堆-heap" tabindex="-1">3. 堆（Heap） <a class="header-anchor" href="#_3-堆-heap" aria-label="Permalink to &quot;3. 堆（Heap）&quot;">​</a></h3><p>堆用于动态内存分配，程序在运行时可以使用如 <code>malloc()</code>、<code>calloc()</code>、<code>new</code> 等函数从堆中分配内存。</p><p><strong>示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dynamicArray </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 动态分配的内存，存储在堆中</span></span></code></pre></div><h3 id="_4-栈-stack" tabindex="-1">4. 栈（Stack） <a class="header-anchor" href="#_4-栈-stack" aria-label="Permalink to &quot;4. 栈（Stack）&quot;">​</a></h3><p>栈用于存储局部变量、函数参数和函数调用的返回地址。每当调用新函数时，它的局部变量和参数都会被压入调用线程的栈中。</p><p><strong>示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> localVar </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 局部变量，存储在栈上</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li><strong>代码段</strong>：存储程序的机器代码。</li><li><strong>数据段</strong>：存储初始化的全局变量和静态变量。</li><li><strong>BSS 段</strong>：存储未初始化的全局变量和静态变量。</li><li><strong>堆</strong>：用于动态内存分配。</li><li><strong>栈</strong>：存储局部变量、函数参数等。</li></ul><p>了解这些不同的段对于理解程序的内存布局和操作系统的内存管理非常重要。不同类型的数据和代码根据其用途和生命周期被存放在适当的段中。</p>`,25),e=[p];function l(h,k,d,r,c,o){return a(),i("div",null,e)}const A=s(t,[["render",l]]);export{y as __pageData,A as default};
