import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"alg/array/lc-704.md","filePath":"alg/array/lc-704.md"}'),l={name:"alg/array/lc-704.md"},e=n(`<p><a href="https://leetcode.cn/problems/binary-search/description/" target="_blank" rel="noreferrer">704. 二分查找</a></p><p>让我们通过一个具体的例子来详细解释二分查找的过程，并通过文本图形化的方式来描述每一步的变化。假设我们有一个数组 <code>nums = [-1, 0, 3, 5, 9, 12]</code> 并且目标值 <code>target = 9</code>。</p><h3 id="初始状态" tabindex="-1">初始状态 <a class="header-anchor" href="#初始状态" aria-label="Permalink to &quot;初始状态&quot;">​</a></h3><ul><li>数组：<code>[-1, 0, 3, 5, 9, 12]</code></li><li>目标值：<code>9</code></li><li>左指针 <code>left = 0</code></li><li>右指针 <code>right = 5</code> (数组长度减1)</li><li>中间位置 <code>mid = (0 + 5) / 2 = 2</code> (索引为2的元素是 <code>3</code>)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：            0  1  2  3  4   5   </span></span>
<span class="line"><span>初始数组：        -1  0  3  5  9  12</span></span>
<span class="line"><span>                  ↑       ↑      ↑</span></span>
<span class="line"><span>                left     mid    right</span></span></code></pre></div><h3 id="第一次循环" tabindex="-1">第一次循环 <a class="header-anchor" href="#第一次循环" aria-label="Permalink to &quot;第一次循环&quot;">​</a></h3><ul><li><code>nums[mid] = 3</code> 小于 <code>target = 9</code>，因此需要调整左指针。</li><li>更新左指针 <code>left = mid + 1 = 3</code>。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：          0  1  2   3  4   5   </span></span>
<span class="line"><span>第一次循环后：   -1  0  3   5  9  12</span></span>
<span class="line"><span>                          ↑  ↑  ↑</span></span>
<span class="line"><span>                        left mid right</span></span></code></pre></div><h3 id="第二次循环" tabindex="-1">第二次循环 <a class="header-anchor" href="#第二次循环" aria-label="Permalink to &quot;第二次循环&quot;">​</a></h3><ul><li>更新中间位置 <code>mid = (3 + 5) / 2 = 4</code> (索引为4的元素是 <code>9</code>)</li><li><code>nums[mid] = 9</code> 等于 <code>target = 9</code>，找到目标值，返回索引 <code>4</code>。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：          0  1  2  3  4   5   </span></span>
<span class="line"><span>第二次循环后：   -1  0  3  5  9  12</span></span>
<span class="line"><span>                            ↑</span></span>
<span class="line"><span>                           mid</span></span></code></pre></div><h3 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h3><ul><li>目标值 <code>9</code> 的索引为 <code>4</code>。</li></ul><p>这个文本图形化的描述显示了如何通过二分查找逐步缩小搜索范围，直到找到目标值。在每次循环中，我们都会根据中间值和目标值的比较结果来调整搜索范围，直到成功找到目标值或确定目标值不存在于数组中。</p><h3 id="更复杂的例子" tabindex="-1">更复杂的例子 <a class="header-anchor" href="#更复杂的例子" aria-label="Permalink to &quot;更复杂的例子&quot;">​</a></h3><p>让我们考虑一个稍微复杂的情况，以进一步解释二分查找的过程。假设我们有一个数组 <code>nums = [-10, -3, 0, 5, 9, 12, 14, 17, 19, 23, 29]</code> 并且目标值 <code>target = 0</code>。</p><h3 id="初始状态-1" tabindex="-1">初始状态 <a class="header-anchor" href="#初始状态-1" aria-label="Permalink to &quot;初始状态&quot;">​</a></h3><ul><li>数组：<code>[-10, -3, 0, 5, 9, 12, 14, 17, 19, 23, 29]</code></li><li>目标值：<code>0</code></li><li>左指针 <code>left = 0</code></li><li>右指针 <code>right = 10</code> (数组长度减1)</li><li>中间位置 <code>mid = (0 + 10) / 2 = 5</code> (索引为5的元素是 <code>12</code>)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：          0  1  2  3  4   5   6   7   8   9  10</span></span>
<span class="line"><span>初始数组：     -10 -3  0  5  9  12  14  17  19  23  29</span></span>
<span class="line"><span>               ↑               ↑                   ↑</span></span>
<span class="line"><span>              left            mid                right</span></span></code></pre></div><h3 id="第一次循环-1" tabindex="-1">第一次循环 <a class="header-anchor" href="#第一次循环-1" aria-label="Permalink to &quot;第一次循环&quot;">​</a></h3><ul><li><code>nums[mid] = 12</code> 大于 <code>target = 0</code>，需要调整右指针。</li><li>更新右指针 <code>right = mid - 1 = 4</code>。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：         0   1  2  3  4   5   6   7   8   9  10</span></span>
<span class="line"><span>第一次循环后： -10 -3  0  5  9  12  14  17  19  23  29</span></span>
<span class="line"><span>              ↑            ↑</span></span>
<span class="line"><span>             left        right</span></span>
<span class="line"><span>               (mid 更新后将位于 left 和 right 的中间)</span></span></code></pre></div><h3 id="第二次循环-1" tabindex="-1">第二次循环 <a class="header-anchor" href="#第二次循环-1" aria-label="Permalink to &quot;第二次循环&quot;">​</a></h3><ul><li>更新中间位置 <code>mid = (0 + 4) / 2 = 2</code> (索引为2的元素是 <code>0</code>)</li><li><code>nums[mid] = 0</code> 等于 <code>target = 0</code>，找到目标值，返回索引 <code>2</code>。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span>索引：         0  1   2  3  4   5   6   7   8   9  10</span></span>
<span class="line"><span>第二次循环后： -10 -3  0  5  9  12  14  17  19  23  29</span></span>
<span class="line"><span>                     ↑</span></span>
<span class="line"><span>                    mid</span></span></code></pre></div><h3 id="结果-1" tabindex="-1">结果 <a class="header-anchor" href="#结果-1" aria-label="Permalink to &quot;结果&quot;">​</a></h3><ul><li>目标值 <code>0</code> 的索引为 <code>2</code>。</li></ul><p>在这个更复杂的例子中，我们看到了二分查找如何在一个更大的数组中有效地定位目标值。通过每次比较中间元素与目标值，并相应地调整搜索范围的边界，二分查找算法能够快速缩小搜索区域，直到找到目标值或确定目标值不在数组中。这种方法特别适用于大型有序数组，因为它大大减少了必须比较的元素数量，从而提高了搜索效率。</p><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><p>下面是一个易于理解的C++代码实现：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> search</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">vector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nums</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 初始化两个指针，i（左指针）和j（右指针），分别指向数组的起始和结束位置</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nums</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 当左指针不大于右指针时，执行循环</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 计算中间位置的索引mid。这里使用i + (j - i) / 2来避免直接使用(i + j) / 2可能导致的整数溢出问题</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mid </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果中间位置的元素小于目标值，说明目标值在数组的右半部分</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nums</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 因此，调整左指针i到中间位置的右侧，即mid + 1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果中间位置的元素大于目标值，说明目标值在数组的左半部分</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nums</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 因此，调整右指针j到中间位置的左侧，即mid - 1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果中间位置的元素正好等于目标值</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 直接返回该位置的索引</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 如果循环结束还没有找到目标值，说明目标值不在数组中，返回-1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>这段代码首先初始化左右指针分别指向数组的开始和结束位置。然后，它进入一个循环，在循环中计算中间位置的索引 <code>mid</code> 并将 <code>mid</code> 位置上的元素与目标值 <code>target</code> 进行比较。如果找到目标值，则返回其索引；如果 <code>mid</code> 位置上的元素小于目标值，则调整左指针 <code>left</code> 到 <code>mid + 1</code>；如果 <code>mid</code> 位置上的元素大于目标值，则调整右指针 <code>right</code> 到 <code>mid - 1</code>。如果在数组中找不到目标值，则最终返回 <code>-1</code>。</p>`,32),h=[e];function p(t,k,d,c,r,o){return a(),i("div",null,h)}const A=s(l,[["render",p]]);export{y as __pageData,A as default};
