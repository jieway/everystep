import{_ as t,c as o,o as r,R as l}from"./chunks/framework.2bglP9T5.js";const _=JSON.parse('{"title":"23 种设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"designpattern/0-designpattern.md","filePath":"designpattern/0-designpattern.md"}'),n={name:"designpattern/0-designpattern.md"},i=l('<h1 id="_23-种设计模式" tabindex="-1">23 种设计模式 <a class="header-anchor" href="#_23-种设计模式" aria-label="Permalink to &quot;23 种设计模式&quot;">​</a></h1><p>设计模式是软件工程中一种重要的概念，用于解决常见的设计问题。设计模式通常分为三类：创建型模式、结构型模式和行为型模式。以下是这些类别下的所有常见设计模式：</p><h3 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">​</a></h3><ol><li><strong>单例模式（Singleton）</strong></li><li><strong>工厂方法模式（Factory Method）</strong></li><li><strong>抽象工厂模式（Abstract Factory）</strong></li><li><strong>建造者模式（Builder）</strong></li><li><strong>原型模式（Prototype）</strong></li></ol><h3 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;">​</a></h3><ol><li><strong>适配器模式（Adapter）</strong></li><li><strong>桥接模式（Bridge）</strong></li><li><strong>组合模式（Composite）</strong></li><li><strong>装饰器模式（Decorator）</strong></li><li><strong>外观模式（Facade）</strong></li><li><strong>享元模式（Flyweight）</strong></li><li><strong>代理模式（Proxy）</strong></li></ol><h3 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">​</a></h3><ol><li><strong>模板方法模式（Template Method）</strong></li><li><strong>命令模式（Command）</strong></li><li><strong>迭代器模式（Iterator）</strong></li><li><strong>观察者模式（Observer）</strong></li><li><strong>中介者模式（Mediator）</strong></li><li><strong>备忘录模式（Memento）</strong></li><li><strong>解释器模式（Interpreter）</strong></li><li><strong>状态模式（State）</strong></li><li><strong>策略模式（Strategy）</strong></li><li><strong>责任链模式（Chain of Responsibility）</strong></li><li><strong>访问者模式（Visitor）</strong></li></ol><p>每种设计模式都有其独特的应用场景和优势，它们帮助开发者以更模块化、灵活和可维护的方式构建软件系统。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>在大型项目中，设计模式被广泛应用于解决各种复杂的设计问题。以下是一些著名的设计模式及其在大型项目中的典型使用场景：</p><ol><li><p><strong>单例模式（Singleton）</strong></p><ul><li><strong>场景</strong>：在数据库连接池管理中，确保全局只有一个数据库连接池实例。</li><li><strong>示例项目</strong>：大型网站的后端系统，如Amazon或eBay，使用单例模式管理数据库连接。</li></ul></li><li><p><strong>观察者模式（Observer）</strong></p><ul><li><strong>场景</strong>：用户界面组件之间的事件通信，例如，当一个对象（如滑动条）的状态改变时，其他依赖该对象的元素（如显示面板）自动更新。</li><li><strong>示例项目</strong>：社交媒体平台如Facebook或Twitter，在用户状态更新时通知所有关注者。</li></ul></li><li><p><strong>工厂方法模式（Factory Method）</strong></p><ul><li><strong>场景</strong>：提供一个创建对象的接口，但让子类决定实例化哪个类。例如，在开发框架中，根据不同的输入创建不同类型的对象。</li><li><strong>示例项目</strong>：大型软件框架如Spring或Angular，用于创建和管理不同类型的对象。</li></ul></li><li><p><strong>策略模式（Strategy）</strong></p><ul><li><strong>场景</strong>：算法或操作可以在运行时更改的情况，如根据不同的业务规则选择不同的计算逻辑。</li><li><strong>示例项目</strong>：电子商务平台如Shopify或Magento，用于处理不同类型的支付策略。</li></ul></li><li><p><strong>装饰器模式（Decorator）</strong></p><ul><li><strong>场景</strong>：动态地给对象添加额外的职责，比如在图形用户界面组件添加特效或功能，如滚动条、边框等。</li><li><strong>示例项目</strong>：图形编辑软件如Adobe Photoshop，用于添加或修改图像特效。</li></ul></li><li><p><strong>命令模式（Command）</strong></p><ul><li><strong>场景</strong>：需要将请求封装成对象，以便使用不同的请求、队列或日志参数来参数化其他对象。它也支持可撤销的操作。</li><li><strong>示例项目</strong>：集成开发环境（IDE）如Visual Studio或Eclipse，用于实现撤销、重做等功能。</li></ul></li><li><p><strong>适配器模式（Adapter）</strong></p><ul><li><strong>场景</strong>：整合两个不兼容的接口，如旧系统与新系统的集成。</li><li><strong>示例项目</strong>：企业资源规划（ERP）系统集成，将旧的系统功能集成到新的ERP系统中。</li></ul></li><li><p><strong>外观模式（Facade）</strong></p><ul><li><strong>场景</strong>：为复杂的系统提供一个简单的接口，例如，简化与复杂库或API的交互。</li><li><strong>示例项目</strong>：操作系统如Windows或MacOS，提供简化的API来处理复杂的底层操作。</li></ul></li><li><p><strong>代理模式（Proxy）</strong></p><ul><li><strong>场景</strong>：为另一个对象提供代表或占位符，以控制对这个对象的访问，如网络服务代理或智能引用。</li><li><strong>示例项目</strong>：内容分发网络（CDN）服务如Akamai或Cloudflare，作为原始服务器的代理来提供内容。</li></ul></li></ol><p>这些设计模式在大型项目中的应用提高了代码的可维护性、扩展性和灵活性，有助于管理复杂性和促进团队之间的有效协作。</p>',13),s=[i];function g(e,a,p,d,c,h){return r(),o("div",null,s)}const m=t(n,[["render",g]]);export{_ as __pageData,m as default};
