import{_ as s,c as i,o as a,R as t}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/static-cast.md","filePath":"cpp/basic/static-cast.md"}'),e={name:"cpp/basic/static-cast.md"},h=t(`<p><code>static_cast</code> 是 C++ 中一种常用的类型转换运算符。它主要用于基础数据类型之间的转换，例如从 <code>int</code> 转换为 <code>float</code>，或从子类指针转换为父类指针。<code>static_cast</code> 转换是在编译时进行检查，因此它不适用于转换有继承关系的指针或引用，除非是向上转换（从子类到父类）。</p><p>下面是一些使用 <code>static_cast</code> 的具体例子：</p><h3 id="例子-1-基础数据类型转换" tabindex="-1">例子 1：基础数据类型转换 <a class="header-anchor" href="#例子-1-基础数据类型转换" aria-label="Permalink to &quot;例子 1：基础数据类型转换&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">float</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static_cast&lt;float&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 将 int 转换为 float</span></span></code></pre></div><p>这里，<code>static_cast&lt;float&gt;(i)</code> 将整数 <code>i</code> 转换为浮点数 <code>f</code>。</p><h3 id="例子-2-类的向上转换-子类到父类" tabindex="-1">例子 2：类的向上转换（子类到父类） <a class="header-anchor" href="#例子-2-类的向上转换-子类到父类" aria-label="Permalink to &quot;例子 2：类的向上转换（子类到父类）&quot;">​</a></h3><p>假设有一个父类 <code>Base</code> 和一个继承自 <code>Base</code> 的子类 <code>Derived</code>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Derived</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static_cast&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 将 Derived 类型的指针转换为 Base 类型的指针</span></span></code></pre></div><p>在这个例子中，<code>static_cast&lt;Base*&gt;(d)</code> 将指向 <code>Derived</code> 类的指针 <code>d</code> 转换为指向它的父类 <code>Base</code> 的指针 <code>b</code>。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><code>static_cast</code> 不能用于含有虚继承的类之间的转换。</li><li>不能用于转换指向不相关类的指针或引用。</li><li>不能用于去除 const、volatile 属性，这需要用到 <code>const_cast</code>。</li></ul><p><code>static_cast</code> 是一种相对安全的转换方式，因为它在编译期间就能检查转换的合法性。如果尝试进行非法的转换，比如将一个整数指针转换为一个字符指针，编译器将报错。</p><h3 id="static-cast-解决了哪些问题" tabindex="-1">static cast 解决了哪些问题？ <a class="header-anchor" href="#static-cast-解决了哪些问题" aria-label="Permalink to &quot;static cast 解决了哪些问题？&quot;">​</a></h3><p>在 C++ 中，如果没有 <code>static_cast</code> 这样的显式类型转换运算符，我们可能会面临一些问题，尤其是在需要明确和安全地转换类型时。<code>static_cast</code> 提供了一种在编译时进行类型检查的方式，确保转换是明确和安全的。下面是一些具体的例子来说明没有 <code>static_cast</code> 时可能出现的问题。</p><h3 id="示例-1-基本数据类型转换" tabindex="-1">示例 1: 基本数据类型转换 <a class="header-anchor" href="#示例-1-基本数据类型转换" aria-label="Permalink to &quot;示例 1: 基本数据类型转换&quot;">​</a></h3><p>假设你想将一个整数转换为浮点数：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">float</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 假设没有 static_cast</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">f </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 隐式转换</span></span></code></pre></div><p>虽然这里的隐式转换是合法的，但在更复杂的情况下，隐式转换可能会导致数据丢失或意外的行为。使用 <code>static_cast</code>，你可以明确表达转换的意图：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">f </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static_cast&lt;float&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 明确的转换</span></span></code></pre></div><h3 id="示例-2-类型转换的安全性" tabindex="-1">示例 2: 类型转换的安全性 <a class="header-anchor" href="#示例-2-类型转换的安全性" aria-label="Permalink to &quot;示例 2: 类型转换的安全性&quot;">​</a></h3><p>考虑以下类的层次结构：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span></code></pre></div><h4 id="向上转换-安全" tabindex="-1">向上转换（安全） <a class="header-anchor" href="#向上转换-安全" aria-label="Permalink to &quot;向上转换（安全）&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 假设没有 static_cast</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 隐式转换，虽然安全，但不够明确</span></span></code></pre></div><p>使用 <code>static_cast</code> 可以明确表示这种转换是有意为之的：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static_cast&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 明确的向上转换</span></span></code></pre></div><h4 id="向下转换-不安全" tabindex="-1">向下转换（不安全） <a class="header-anchor" href="#向下转换-不安全" aria-label="Permalink to &quot;向下转换（不安全）&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 假设没有 static_cast 或 dynamic_cast</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 不安全的 C 风格强制转换</span></span></code></pre></div><p>这种转换实际上是不安全的，因为 <code>b</code> 可能不是 <code>Derived</code> 类型的对象。没有 <code>static_cast</code>（或更适合这种情况的 <code>dynamic_cast</code>），程序员可能会倾向于使用 C 风格的强制转换，这可能隐藏潜在的风险。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>没有 <code>static_cast</code>，程序员可能会过度依赖隐式转换或不安全的 C 风格转换，这可能导致以下问题：</p><ol><li><strong>代码的可读性和意图不明确</strong>：<code>static_cast</code> 明确表达了程序员的意图，使代码更易于理解和维护。</li><li><strong>缺乏编译时类型检查</strong>：<code>static_cast</code> 在编译时检查转换的合法性，减少了运行时错误的风险。</li><li><strong>潜在的安全风险</strong>：不安全的类型转换可能导致未定义行为，如内存访问错误，数据损坏等。</li></ol><p>因此，<code>static_cast</code> 是 C++ 类型转换的一个重要组成部分，它提供了一种安全、明确的方式来执行类型转换。</p>`,33),l=[h];function n(p,k,d,c,r,o){return a(),i("div",null,l)}const A=s(e,[["render",n]]);export{y as __pageData,A as default};
