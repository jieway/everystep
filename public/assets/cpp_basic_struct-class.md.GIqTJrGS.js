import{_ as s,c as i,o as a,R as e}from"./chunks/framework.2bglP9T5.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/struct-class.md","filePath":"cpp/basic/struct-class.md"}'),l={name:"cpp/basic/struct-class.md"},n=e(`<p>在 C++ 中，<code>struct</code>（结构体）和 <code>class</code>（类）在很多方面都非常相似，但它们在默认的访问权限和继承类型上有一些关键区别。让我们通过一个具体的例子来说明这些区别。</p><h3 id="基本区别" tabindex="-1">基本区别 <a class="header-anchor" href="#基本区别" aria-label="Permalink to &quot;基本区别&quot;">​</a></h3><ol><li><p><strong>默认的访问权限</strong>:</p><ul><li>在 <code>class</code> 中，默认的成员访问权限是 <code>private</code>。</li><li>在 <code>struct</code> 中，默认的成员访问权限是 <code>public</code>。</li></ul></li><li><p><strong>默认的继承类型</strong>:</p><ul><li>当从 <code>class</code> 继承时，默认的继承类型是 <code>private</code>。</li><li>当从 <code>struct</code> 继承时，默认的继承类型是 <code>public</code>。</li></ul></li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>让我们通过一个示例来看看这些区别是如何体现在实际代码中的。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义一个 struct</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StructExample</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 默认是 public</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* ... */</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 默认是 public</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义一个 class</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ClassExample</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 默认是 private</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* ... */</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 继承</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> DerivedStruct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> StructExample </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 默认是 public 继承</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> DerivedClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ClassExample </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 默认是 private 继承</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>在这个例子中，<code>StructExample</code> 和 <code>ClassExample</code> 在功能上是等效的，但它们的成员 <code>a</code> 和成员函数 <code>show</code> 的默认访问权限不同。在 <code>StructExample</code> 中，<code>a</code> 和 <code>show</code> 默认是公开的（public），而在 <code>ClassExample</code> 中，<code>a</code> 默认是私有的（private），<code>show</code> 需要显式声明为公开。</p><p>同样，当 <code>DerivedStruct</code> 继承自 <code>StructExample</code> 时，默认是公开继承，这意味着 <code>StructExample</code> 中的公开成员在 <code>DerivedStruct</code> 中仍然是公开的。而 <code>DerivedClass</code> 从 <code>ClassExample</code> 继承时，默认是私有继承，这意味着 <code>ClassExample</code> 中的所有成员在 <code>DerivedClass</code> 中都成为了私有成员，除非它们在 <code>ClassExample</code> 中被声明为 <code>protected</code>。</p><h3 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h3><ul><li>当你需要一个主要用于数据存储的简单结构体时，使用 <code>struct</code> 是更自然的选择。</li><li>当你需要一个具有封装、继承和多态等特性的完整类时，使用 <code>class</code> 更为合适。</li></ul><p>在实际使用中，<code>struct</code> 和 <code>class</code> 的选择往往取决于你的编程风格和特定场景的需求。在 C++ 中，你可以在两者之间自由选择，只需注意它们在默认访问权限和继承类型上的差异。</p>`,11),t=[n];function p(h,c,k,d,r,o){return a(),i("div",null,t)}const D=s(l,[["render",p]]);export{g as __pageData,D as default};
