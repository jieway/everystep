import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/friend.md","filePath":"cpp/basic/friend.md"}'),p={name:"cpp/basic/friend.md"},t=n(`<p>友元关系（Friendship）在 C++ 中是一种允许特定的外部函数或类访问另一个类的私有（private）和保护（protected）成员的机制。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>下面是一个简单的例子来展示 C++ 中 <code>friend</code> 关键字的用法。假设我们有两个类，<code>Box</code> 和 <code>BoxInspector</code>。我们希望 <code>BoxInspector</code> 类能够访问 <code>Box</code> 类的私有成员，但这些成员对其他类来说应该是不可见的。这就是我们使用 <code>friend</code> 的场景。</p><p>首先，我们定义一个 <code>Box</code> 类，它有一个私有成员变量，比如 <code>contents</code>，用来存储一些内容。然后，我们将 <code>BoxInspector</code> 类声明为 <code>Box</code> 的友元，这样 <code>BoxInspector</code> 就能访问 <code>Box</code> 的私有成员了。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 前向声明</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BoxInspector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Box</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    friend</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BoxInspector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 声明 BoxInspector 为友元类</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string contents</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Box</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> contents</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BoxInspector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> revealContents</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Box</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The contents of the box are: </span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">contents</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Box </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">myBox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">secret message</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    BoxInspector inspector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    inspector</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">revealContents</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">myBox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 可以访问 Box 的私有成员</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在这个例子中，<code>BoxInspector</code> 类的一个对象能够访问 <code>Box</code> 类对象的私有成员 <code>contents</code>。这是因为在 <code>Box</code> 类中，我们将 <code>BoxInspector</code> 声明为了友元类。如果没有 <code>friend</code> 声明，这个操作将会因为访问控制而失败，因为通常类的私有成员是不允许被外部访问的。</p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>友元关系在 C++ 中用于特定的情况，其中需要提供对类的私有或保护成员的直接访问，但又不想通过公共接口公开这些成员。以下是一些典型的应用场景：</p><ol><li><p><strong>操作符重载</strong>：对于某些操作符，如输入输出操作符 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code>，通常需要访问对象的私有数据。将这些操作符重载为友元函数可以使得它们能够直接访问类的私有成员，同时又不是类的成员函数。</p></li><li><p><strong>实现迭代器</strong>：在实现容器类（如链表、树、图等）时，迭代器通常需要直接访问容器的内部数据结构。将迭代器类声明为容器类的友元可以实现这种直接访问，而不公开容器的内部细节。</p></li><li><p><strong>工厂模式</strong>：在工厂设计模式中，工厂类需要创建其他类的实例。如果被创建的类的构造函数是私有或保护的，可以通过将工厂类声明为友元类来实现实例化。</p></li><li><p><strong>单元测试</strong>：对于单元测试，测试框架需要访问类的内部状态来进行有效的测试。将测试类或测试函数声明为友元可以访问类的私有成员，而不需要改变类的接口。</p></li><li><p><strong>对等类</strong>：在某些情况下，两个类可能需要密切协作，彼此访问对方的私有数据。在这种情况下，可以互相声明对方为友元类。</p></li><li><p><strong>辅助类或函数</strong>：如果有辅助类或函数需要密切地操作主类的内部状态（例如，状态保存和恢复、内部数据的特殊处理等），可以将这些辅助类或函数声明为友元。</p></li></ol><p>使用友元关系时，应该谨慎考虑是否真的需要这种级别的访问。过度使用友元关系可能会破坏封装性，使得代码更难维护和理解。通常，应该首先考虑是否可以通过其他方式（如增加合适的公共接口）来实现相同的功能。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>总结一下友元关系的关键点：</p><ol><li><p><strong>友元函数</strong>：如果某个函数被声明为一个类的友元，那么这个函数可以访问该类的所有成员，包括私有和保护成员。友元函数不是类的成员函数，即使它有权访问类的私有成员。</p></li><li><p><strong>友元类</strong>：如果一个类被声明为另一个类的友元，那么这个友元类的所有成员函数都可以访问另一个类的私有和保护成员。</p></li><li><p><strong>作用域</strong>：友元关系是单向的而且不可传递。例如，如果类 A 是类 B 的友元，这并不意味着类 B 是类 A 的友元，也不意味着类 A 的友元可以访问类 B 的私有成员。</p></li><li><p><strong>访问控制</strong>：友元关系提供了一种绕过常规访问控制的手段，这对于某些特定的程序设计模式（如迭代器或其他需要密切访问另一个类内部的情况）是必要的。</p></li><li><p><strong>破坏封装</strong>：虽然友元关系在某些情况下很有用，但过度使用会破坏对象的封装性和模块化。合理使用友元关系对于保持代码的清晰性和可维护性是很重要的。</p></li><li><p><strong>声明位置</strong>：友元声明通常放置在类定义中（在 <code>private</code>、<code>protected</code> 或 <code>public</code> 部分均可），但友元本身并不是类的成员。</p></li></ol><p>通过这些特点，友元关系可以在不公开类的内部细节的情况下，为特定的其他类或函数提供必要的访问权限。</p>`,14),l=[t];function h(k,e,d,r,o,c){return a(),i("div",null,l)}const B=s(p,[["render",h]]);export{y as __pageData,B as default};
