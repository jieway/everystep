import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/dynamic-cast.md","filePath":"cpp/basic/dynamic-cast.md"}'),h={name:"cpp/basic/dynamic-cast.md"},l=n(`<p><code>dynamic_cast</code> 在 C++ 中用于处理具有多态性质的对象。它主要用于安全地将指针或引用从一种类型转换为另一种类型，特别是在类层次结构中进行向下转换（从基类到派生类）。与 <code>static_cast</code> 不同，<code>dynamic_cast</code> 在运行时执行类型检查，确保转换的安全性。</p><p>让我们通过一个具体的例子来说明 <code>dynamic_cast</code> 的使用。</p><h3 id="示例-多态和类层次结构" tabindex="-1">示例：多态和类层次结构 <a class="header-anchor" href="#示例-多态和类层次结构" aria-label="Permalink to &quot;示例：多态和类层次结构&quot;">​</a></h3><p>假设有一个基类 <code>Base</code> 和两个从 <code>Base</code> 派生的类 <code>Derived1</code> 和 <code>Derived2</code>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 虚函数确保多态性</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>在这个例子中，<code>Base</code> 有一个虚函数 <code>print</code>，这使得 <code>Base</code>、<code>Derived1</code> 和 <code>Derived2</code> 都是多态类型。</p><h3 id="使用-dynamic-cast-进行向下转换" tabindex="-1">使用 dynamic_cast 进行向下转换 <a class="header-anchor" href="#使用-dynamic-cast-进行向下转换" aria-label="Permalink to &quot;使用 dynamic_cast 进行向下转换&quot;">​</a></h3><p>现在假设你有一个指向 <code>Base</code> 类型的指针，实际上它指向一个 <code>Derived1</code> 对象，你想将它安全地转换为 <code>Derived1</code> 类型的指针。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> basePtr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 实际指向 Derived1 对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> derived1Ptr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> dynamic_cast&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 向下转换</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">derived1Ptr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> nullptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 转换成功</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 转换失败，basePtr 不指向 Derived1</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在这个例子中，<code>dynamic_cast&lt;Derived1*&gt;(basePtr)</code> 尝试将 <code>basePtr</code> 转换为 <code>Derived1*</code> 类型。由于 <code>basePtr</code> 实际上指向一个 <code>Derived1</code> 对象，所以转换是成功的。如果 <code>basePtr</code> 指向 <code>Derived2</code> 或其他非 <code>Derived1</code> 类型的对象，则转换结果将为 <code>nullptr</code>，表示转换失败。</p><h3 id="dynamic-cast-的运行时检查" tabindex="-1">dynamic_cast 的运行时检查 <a class="header-anchor" href="#dynamic-cast-的运行时检查" aria-label="Permalink to &quot;dynamic_cast 的运行时检查&quot;">​</a></h3><p><code>dynamic_cast</code> 使用了运行时类型信息 (RTTI)，在运行时检查转换的有效性。这意味着，如果转换不合法（例如，尝试将 <code>Base</code> 类型的对象转换为不兼容的派生类类型），<code>dynamic_cast</code> 将返回空指针（对于指针类型）或抛出异常（对于引用类型）。</p><h3 id="示例-dynamic-cast-与异常" tabindex="-1">示例：dynamic_cast 与异常 <a class="header-anchor" href="#示例-dynamic-cast-与异常" aria-label="Permalink to &quot;示例：dynamic_cast 与异常&quot;">​</a></h3><p>如果使用引用而非指针进行 <code>dynamic_cast</code>，在转换失败时会抛出一个异常：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> baseRef </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> derived1Ref </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> dynamic_cast&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">baseRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 使用引用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 转换成功</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">bad_cast</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 转换失败</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>这里，如果 <code>baseRef</code> 实际上不是 <code>Derived1</code> 类型的引用，则 <code>dynamic_cast</code> 会抛出 <code>std::bad_cast</code> 异常。</p><h3 id="dynamic-cast-出现之前是如何解决上述问题的" tabindex="-1">dynamic_cast 出现之前是如何解决上述问题的？ <a class="header-anchor" href="#dynamic-cast-出现之前是如何解决上述问题的" aria-label="Permalink to &quot;dynamic_cast 出现之前是如何解决上述问题的？&quot;">​</a></h3><p>在 C++ 中引入 <code>dynamic_cast</code> 之前，实现多态性质对象之间安全转换的功能较为复杂和有风险。下面是一些在没有 <code>dynamic_cast</code> 的情况下实现类似功能的方法，以及这些方法存在的问题：</p><h3 id="_1-手动类型检查和转换" tabindex="-1">1. 手动类型检查和转换 <a class="header-anchor" href="#_1-手动类型检查和转换" aria-label="Permalink to &quot;1. 手动类型检查和转换&quot;">​</a></h3><p>在 <code>dynamic_cast</code> 出现之前，程序员可能需要手动进行类型检查和转换。例如，通过在基类中添加标识类型的成员变量，然后基于这些信息决定是否可以安全地将基类的指针转换为派生类的指针。</p><h4 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    enum</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> BASE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> DERIVED1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> DERIVED2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Type type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Type</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DERIVED1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Derived2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DERIVED2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>在需要转换时，程序员需要检查 <code>type</code> 字段，并进行相应的转换：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> basePtr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DERIVED1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> derived1Ptr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // C 风格强制转换</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h4 id="存在的问题" tabindex="-1">存在的问题： <a class="header-anchor" href="#存在的问题" aria-label="Permalink to &quot;存在的问题：&quot;">​</a></h4><ul><li><strong>类型安全性问题</strong>：这种方法缺乏编译时或运行时的类型检查，容易引入错误。</li><li><strong>维护难度</strong>：随着类层次结构的增加，手动维护类型信息变得越来越复杂。</li><li><strong>违反封装原则</strong>：通过公开类型信息，破坏了类的封装性。</li></ul><h3 id="_2-c-风格的强制类型转换" tabindex="-1">2. C 风格的强制类型转换 <a class="header-anchor" href="#_2-c-风格的强制类型转换" aria-label="Permalink to &quot;2. C 风格的强制类型转换&quot;">​</a></h3><p>在 <code>dynamic_cast</code> 之前，C++ 程序员可能会依赖于 C 风格的强制类型转换（如 <code>(Derived1*)basePtr</code>）来进行转换。</p><h4 id="存在的问题-1" tabindex="-1">存在的问题： <a class="header-anchor" href="#存在的问题-1" aria-label="Permalink to &quot;存在的问题：&quot;">​</a></h4><ul><li><strong>安全性问题</strong>：这种转换不进行任何类型检查，如果转换不合法，可能导致未定义的行为。</li><li><strong>代码可读性差</strong>：C 风格的转换不明确其意图，减少了代码的可读性和维护性。</li></ul><h3 id="_3-使用虚函数进行类型识别" tabindex="-1">3. 使用虚函数进行类型识别 <a class="header-anchor" href="#_3-使用虚函数进行类型识别" aria-label="Permalink to &quot;3. 使用虚函数进行类型识别&quot;">​</a></h3><p>一种可能的替代方法是在基类中使用虚函数来返回类型信息，然后基于这个信息进行转换。</p><h4 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> isDerived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> isDerived2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> isDerived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 类似地为 Derived2 实现</span></span></code></pre></div><p>然后，根据返回的类型信息进行转换：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> basePtr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Derived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isDerived1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> derived1Ptr </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Derived1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">basePtr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // C 风格强制转换</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h4 id="存在的问题-2" tabindex="-1">存在的问题： <a class="header-anchor" href="#存在的问题-2" aria-label="Permalink to &quot;存在的问题：&quot;">​</a></h4><ul><li><strong>代码冗余</strong>：为每个类实现这样的虚函数会增加很多重复的代码。</li><li><strong>依旧不够安全</strong>：尽管这种方法通过虚函数提供了一种类型检查机制，但最终的转换仍然依赖于不安全的 C 风格强制转换。</li></ul><p><code>dynamic_cast</code> 在运行时执行的检查是基于 C++ 的运行时类型信息 (RTTI) 系统。这些检查确保了类型转换的安全性，特别是在多态类层次结构中进行向下转换（从基类到派生类）时。以下是 <code>dynamic_cast</code> 进行的主要检查：</p><h3 id="_1-检查对象的实际类型" tabindex="-1">1. 检查对象的实际类型 <a class="header-anchor" href="#_1-检查对象的实际类型" aria-label="Permalink to &quot;1. 检查对象的实际类型&quot;">​</a></h3><p>当你尝试使用 <code>dynamic_cast</code> 将一个基类指针或引用转换为派生类指针或引用时，<code>dynamic_cast</code> 首先检查对象的实际类型是否与目标类型兼容。这意味着：</p><ul><li>如果基类指针实际上指向一个派生类对象，且这个派生类与目标类型相符合或是目标类型的派生类，转换将成功。</li><li>如果基类指针没有指向一个与目标类型兼容的对象，转换将失败。对于指针类型，转换结果为 <code>nullptr</code>；对于引用类型，将抛出 <code>std::bad_cast</code> 异常。</li></ul><h3 id="_2-检查多态性" tabindex="-1">2. 检查多态性 <a class="header-anchor" href="#_2-检查多态性" aria-label="Permalink to &quot;2. 检查多态性&quot;">​</a></h3><p><code>dynamic_cast</code> 要求基类具有至少一个虚函数，从而保证类具有多态性。这是因为 <code>dynamic_cast</code> 依赖于对象的虚函数表（vtable）来确定其实际类型。如果尝试对一个没有虚函数的类进行 <code>dynamic_cast</code>，则会导致编译错误。</p><h3 id="_3-运行时类型信息-rtti" tabindex="-1">3. 运行时类型信息 (RTTI) <a class="header-anchor" href="#_3-运行时类型信息-rtti" aria-label="Permalink to &quot;3. 运行时类型信息 (RTTI)&quot;">​</a></h3><p><code>dynamic_cast</code> 使用 RTTI 来确定对象的实际类型。RTTI 提供了对象类型信息，包括其在类层次结构中的位置。这允许 <code>dynamic_cast</code> 在运行时进行正确的类型检查。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在 <code>dynamic_cast</code> 引入之前，C++ 缺乏一种安全、简洁且标准的方式来实现多态性质对象之间的转换。尽管可以通过各种手段尝试实现类似功能，但这些方法要么牺牲了安全性和封装性，要么导致代码冗余和维护困难。<code>dynamic_cast</code> 的引入解决了这些问题，提供了一种类型安全且易于维护的方式来处理多态性质的对象转换。</p>`,48),e=[l];function k(t,p,d,r,c,g){return a(),i("div",null,e)}const A=s(h,[["render",k]]);export{o as __pageData,A as default};
