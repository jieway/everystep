import{_ as i,c as t,o as l,R as e}from"./chunks/framework.2bglP9T5.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/organization.md","filePath":"cpp/basic/organization.md"}'),o={name:"cpp/basic/organization.md"},a=e("<p>C++可以被分为四个主要的子语言部分，每个部分都有其独特的特性和用途：</p><ol><li><p><strong>C风格的C++</strong>：</p><ul><li>核心基础：C++在很大程度上基于C语言，包括块结构、语句、预处理器、内置数据类型、数组、指针等。</li><li>特点：C++在这一层面提供了一些优于C语言的解决方案，但在使用C的部分时，需要遵循C语言更有限的规则，例如没有模板、异常处理和函数重载等。</li></ul></li><li><p><strong>面向对象的C++</strong>：</p><ul><li>类和对象：涉及类的构造（包括构造函数和析构函数）、封装、继承、多态和虚函数等。</li><li>特点：这部分是C++相对于C的主要扩展，遵循传统的面向对象设计原则。</li></ul></li><li><p><strong>模板C++</strong>：</p><ul><li>泛型编程：主要涉及模板编程，包括对类型无关代码的支持。</li><li>特点：模板是C++中功能强大的部分，促成了新的编程范式，如模板元编程（Template Metaprogramming, TMP）。对于大多数C++程序员来说，TMP的规则并不常见。</li></ul></li><li><p><strong>标准模板库（STL）</strong>：</p><ul><li>高级库：STL是基于模板的特殊库，包括容器、迭代器、算法和函数对象等。</li><li>特点：STL有其特定的使用方式和约定，其设计思想和实现方式与其他库或语言特性有所不同。</li></ul></li></ol><p>在C++编程中，了解并根据这些子语言的特性来调整编程策略是非常重要的。例如，在处理内置类型时，传值（pass-by-value）通常比传引用（pass-by-reference）更高效。但在面向对象的C++中，由于存在构造函数和析构函数，传递引用到常量（pass-by-reference-to-const）通常是更好的选择。在模板C++中，由于类型未知，这种选择又会不同。因此，理解这些子语言的不同，有助于更有效地使用C++的各种特性。</p>",3),s=[a];function n(r,p,c,_,C,g){return l(),t("div",null,s)}const m=i(o,[["render",n]]);export{d as __pageData,m as default};
