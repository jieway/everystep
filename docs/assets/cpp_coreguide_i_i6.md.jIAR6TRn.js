import{_ as e,c as a,o as t,R as r}from"./chunks/framework.2bglP9T5.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/coreguide/i/i6.md","filePath":"cpp/coreguide/i/i6.md"}'),o={name:"cpp/coreguide/i/i6.md"},i=r(`<h3 id="i-6-优先使用-expects-来表达前条件" tabindex="-1"><a name="Ri-expects"></a>I.6: 优先使用 <code>Expects()</code> 来表达前条件 <a class="header-anchor" href="#i-6-优先使用-expects-来表达前条件" aria-label="Permalink to &quot;&lt;a name=&quot;Ri-expects&quot;&gt;&lt;/a&gt;I.6: 优先使用 \`Expects()\` 来表达前条件&quot;">​</a></h3><h5 id="理由" tabindex="-1">理由 <a class="header-anchor" href="#理由" aria-label="Permalink to &quot;理由&quot;">​</a></h5><p>清晰地表明这个条件是一个前条件，并便于工具的利用。</p><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><pre><code>int area(int height, int width)
{
    Expects(height &gt; 0 &amp;&amp; width &gt; 0);            // 好
    if (height &lt;= 0 || width &lt;= 0) my_error();   // 隐晦的
    // ...
}
</code></pre><h5 id="注解" tabindex="-1">注解 <a class="header-anchor" href="#注解" aria-label="Permalink to &quot;注解&quot;">​</a></h5><p>前条件是可以用许多方式来说明的，包括代码注释，<code>if</code> 语句，以及 <code>assert()</code>。 这些方式使其难于与普通代码之间进行区分，难于进行更新，难于利用工具来操作，而且可能具有错误的语义（你真的总是想要在调试模式中止程序而在生产运行中不做任何检查吗？）</p><h5 id="注解-1" tabindex="-1">注解 <a class="header-anchor" href="#注解-1" aria-label="Permalink to &quot;注解&quot;">​</a></h5><p>前条件应当是接口的一部分，而不是实现的一部分， 但我们至今还没有能够做到这点的语言设施。 一旦语言支持变为可用（例如，参见<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf" target="_blank" rel="noreferrer">契约提案</a>），我们就将会采用前条件，后条件和断言的标准版本。</p><h5 id="注解-2" tabindex="-1">注解 <a class="header-anchor" href="#注解-2" aria-label="Permalink to &quot;注解&quot;">​</a></h5><p><code>Expects()</code> 还可以用于在算法的中部来检查某个条件。</p><h5 id="注解-3" tabindex="-1">注解 <a class="header-anchor" href="#注解-3" aria-label="Permalink to &quot;注解&quot;">​</a></h5><p>使用 <code>unsigned</code> 并不是回避<a href="#Res-nonnegative">确保非负数值</a>问题的好方法。</p><h5 id="强制实施" tabindex="-1">强制实施 <a class="header-anchor" href="#强制实施" aria-label="Permalink to &quot;强制实施&quot;">​</a></h5><p>【无法强制实施】 要把各种对前条件进行断言的方式都找出来是不可行的。对那些易于识别的（如 <code>assert()</code>）实例给出警告的做法，其意义在缺少语言设施的前提下是有问题的。</p>`,15),c=[i];function d(n,h,s,l,p,_){return t(),a("div",null,c)}const m=e(o,[["render",d]]);export{f as __pageData,m as default};
