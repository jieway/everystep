import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/dangling-pointer.md","filePath":"cpp/basic/dangling-pointer.md"}'),l={name:"cpp/basic/dangling-pointer.md"},t=n(`<p>野指针是指向“不确定”或“非法”内存区域的指针。它们通常由不正确的指针使用和内存管理导致，可能会导致程序崩溃或不可预测的行为。</p><h3 id="产生野指针的常见情况" tabindex="-1">产生野指针的常见情况 <a class="header-anchor" href="#产生野指针的常见情况" aria-label="Permalink to &quot;产生野指针的常见情况&quot;">​</a></h3><ol><li><p><strong>未初始化的指针</strong>:</p><ul><li>分配指针变量但未初始化时，它包含随机内存地址，这可能指向任何位置。</li></ul></li><li><p><strong>已释放的内存</strong>:</p><ul><li>当内存被释放（如使用 <code>delete</code> 或 <code>free</code>），指向该内存的指针仍然存在。此时该指针变成了野指针。</li></ul></li><li><p><strong>超出作用域的指针</strong>:</p><ul><li>当指针指向一个局部变量，而该变量已经超出作用域，指针变成野指针。</li></ul></li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createPointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 返回局部变量的地址，导致野指针</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 未初始化的指针</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 未定义行为，p 是野指针</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">q </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    delete</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // q 现在是野指针</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createPointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // r 是野指针</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 未定义行为</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在这个例子中，<code>p</code> 是未初始化的指针，<code>q</code> 在释放内存后变成野指针，<code>r</code> 因为指向超出作用域的内存而成为野指针。</p><h3 id="避免野指针的策略" tabindex="-1">避免野指针的策略 <a class="header-anchor" href="#避免野指针的策略" aria-label="Permalink to &quot;避免野指针的策略&quot;">​</a></h3><ol><li><p><strong>初始化指针</strong>:</p><ul><li>总是初始化指针。可以初始化为 <code>nullptr</code> 或一个有效的内存地址。</li></ul></li><li><p><strong>释放后置空</strong>:</p><ul><li>释放指针指向的内存后，立即将指针置为 <code>nullptr</code>。这可以防止悬挂指针（dangling pointer）。</li></ul></li><li><p><strong>避免返回局部变量的地址</strong>:</p><ul><li>不要返回函数内局部变量的地址。如果需要，可以使用动态分配的内存或者通过参数传递指针。</li></ul></li><li><p><strong>使用智能指针</strong>:</p><ul><li>尽可能使用 C++ 的智能指针（如 <code>std::unique_ptr</code> 和 <code>std::shared_ptr</code>），它们可以帮助自动管理内存，减少野指针的风险。</li></ul></li><li><p><strong>谨慎操作指针</strong>:</p><ul><li>在对指针进行解引用、赋值或算术运算前，检查其有效性。</li></ul></li></ol><p>野指针是 C++ 中常见的问题之一，正确的指针和内存管理是避免这类问题的关键。通过上述策略，可以显著降低野指针带来的风险。</p>`,9),h=[t];function p(k,e,r,d,g,o){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{A as __pageData,y as default};
