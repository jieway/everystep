import{_ as s,c as i,o as a,R as n}from"./chunks/framework.2bglP9T5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/basic/const-member-functions.md","filePath":"cpp/basic/const-member-functions.md"}'),l={name:"cpp/basic/const-member-functions.md"},t=n(`<p>常函数（const member function）是C++中的一个重要概念，用于指明该成员函数不会修改其所属对象的状态。常函数内部不能修改任何非静态成员变量，也不能调用任何非常成员函数。这种机制有助于提供更好的代码安全性，保证对象在特定方法调用期间保持不变。</p><h3 id="定义常函数的语法" tabindex="-1">定义常函数的语法： <a class="header-anchor" href="#定义常函数的语法" aria-label="Permalink to &quot;定义常函数的语法：&quot;">​</a></h3><p>在成员函数的声明和定义中，在函数参数列表的闭括号后添加关键字<code>const</code>，来指示该函数是一个常函数。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> myFunc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 这是一个常函数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>为了对比讲解常函数和修改对象状态的函数，让我们考虑一个简单的<code>Counter</code>类的例子。这个类将包含一个计数器，我们将实现两个函数：一个用于增加计数器（修改对象状态），另一个用于获取当前计数（不修改对象状态）。</p><h3 id="示例类定义" tabindex="-1">示例类定义： <a class="header-anchor" href="#示例类定义" aria-label="Permalink to &quot;示例类定义：&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 增加计数器的值（修改对象状态）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> increment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        count</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 获取当前计数（常函数，不修改对象状态）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>在上面的代码中，<code>increment</code>函数修改了<code>Counter</code>对象的状态，即它增加了<code>count</code>成员变量的值。另一方面，<code>getCount</code>是一个常函数，它只是返回<code>count</code>的值而不做任何修改。</p><h3 id="使用这些函数的例子" tabindex="-1">使用这些函数的例子： <a class="header-anchor" href="#使用这些函数的例子" aria-label="Permalink to &quot;使用这些函数的例子：&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Counter c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 增加计数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">increment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // count现在是1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 读取计数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Count: </span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出 &quot;Count: 1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 假设我们有一个常量的Counter对象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Counter constCounter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 下面这行将会编译错误，因为increment修改对象状态，但constCounter是常量</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // constCounter.increment();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 但我们可以调用getCount，因为它是一个常函数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Const Count: </span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> constCounter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出 &quot;Const Count: 0&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="对比分析" tabindex="-1">对比分析： <a class="header-anchor" href="#对比分析" aria-label="Permalink to &quot;对比分析：&quot;">​</a></h3><ul><li><p><code>increment</code>函数改变了<code>Counter</code>对象的内部状态（<code>count</code>变量的值）。这是非常函数的一个典型例子，因为它实际上修改了对象的数据成员。</p></li><li><p><code>getCount</code>函数不改变对象的任何状态。由于它被声明为const，它可以在常量对象上被安全地调用。它的存在保证了对象的状态（在这个例子中是<code>count</code>变量的值）在调用期间不会被改变。</p></li></ul><p>通过这个例子，我们可以看到常函数如何提供对对象状态不可变的保证，而普通成员函数则可以自由地修改对象的状态。这种区分对于保证对象的数据完</p><p>整性以及在设计接口时提供明确的语义非常重要。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>常函数（const member functions）在C++中有多种使用场景，特别是在那些需要保证数据不被修改的情况下。以下是一些具体的使用场景：</p><ol><li><p><strong>读取器/访问器（Accessors）</strong>：</p><ul><li>当你需要实现一个类的成员函数仅用于访问数据而不修改它时，常函数是最佳选择。这通常适用于获取类成员变量的值的函数（通常称为getter）。</li><li>例如，获取一个对象的状态或属性，但不希望该操作更改对象。</li></ul></li><li><p><strong>操作常对象</strong>：</p><ul><li>当你有一个被声明为常量（const）的对象时，只能调用它的常函数。这对于确保对象在其生命周期内不被修改非常有用。</li><li>例如，在一个函数中传递一个常量引用参数时，只能调用该对象的常函数。</li></ul></li><li><p><strong>提供接口一致性</strong>：</p><ul><li>当设计类接口时，你可以通过使函数成为常函数来明确指出哪些函数不会修改对象的状态。这使得类的使用者更容易理解如何安全地使用这个类。</li><li>例如，一个类表示一个不可变的实体，如数学中的点（Point），常函数可以用来强调这一特性。</li></ul></li><li><p><strong>多线程/并发编程</strong>：</p><ul><li>在多线程环境中，常函数可以保证在函数执行期间，对象的状态不会被其他线程修改，从而减少了数据竞争和一致性问题。</li><li>例如，当多个线程需要读取同一个对象的数据而不改变它时。</li></ul></li><li><p><strong>与常量成员变量配合</strong>：</p><ul><li>如果类中有常量成员变量，常函数可以用于读取这些成员变量的值，因为常量成员变量只能在常函数中被访问。</li><li>例如，一个类有一个常量配置，需要通过常函数来访问。</li></ul></li><li><p><strong>复合对象和库设计</strong>：</p><ul><li>在设计复杂的对象或库时，常函数提供了一种方式来确保某些操作不会改变对象的状态，这对于保持对象之间的一致性和预期行为至关重要。</li><li>例如，在GUI库中，可能有一个函数用于绘制一个组件但不改变其任何状态。</li></ul></li></ol><p>通过这些场景，我们可以看出常函数在C++中的重要性，它们不仅提高了代码的安全性和可维护性，还有助于在设计和实现更复杂的系统时保持清晰和一致的编程接口。</p>`,18),p=[t];function h(k,e,r,d,c,o){return a(),i("div",null,p)}const A=s(l,[["render",h]]);export{y as __pageData,A as default};
